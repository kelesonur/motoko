Local Support Project

A simple Motoko canister and HTML/JavaScript frontend demonstrating a local support app on the Internet Computer. Users can create “needs,” donate to them, and view all needs and donations.

PROJECT STRUCTURE Main.mo (Motoko actor defining the "LocalSupport" canister) index.html (Frontend for interacting with the canister) app.js (Node script for calling the canister from a Node environment) dfx.json (DFX configuration file) package.json (NPM configuration file) .dfx/ (Auto-generated folder containing build artifacts)

Key Files:

Main.mo: The Motoko source code for your LocalSupport actor.
index.html: Simple frontend to create needs, donate, and retrieve data from the canister.
app.js: Example Node.js script using @dfinity/agent to interact with the canister.
dfx.json: DFX configuration file defining the canister(s) and network setup.
package.json: NPM config file with scripts and dependencies.
SETUP

Install DFX (if not already installed): sh -ci "$(curl -fsSL https://internetcomputer.org/install.sh)" (or see official DFX docs for more info)

Install Node Dependencies from the project root: npm install

USAGE

Start the Local Replica npm run dfx:start This launches a local IC replica (127.0.0.1:8000) in the background.

Build & Deploy Your Canister npm run dfx:deploy Compiles Motoko code (Main.mo) and deploys it locally.

Interact via Frontend (index.html)

Open index.html in your browser or the Motoko Playground’s frontend view.
Create a Need: enter a description, click “Create Need.”
Donate: enter the Need ID and donation amount, then click “Donate.”
View all needs or contributions by clicking “Get All Needs” or “Get Contributions.”
Interact via Node Script (app.js) (optional) node app.js The script creates a need, donates to it, and prints out all needs and contributions.

NOTES

If the canister in dfx.json is named “Main,” your compiled files end up in .dfx/local/canisters/Main. If you named the canister “local_support,” update the paths in index.html (and app.js if used).
The code in Main.mo uses msg.caller (or Principal.fromText) as placeholders for the user Principal. Adjust as needed for your real application logic.
The .dfx/ directory is generated by DFX. It is often excluded from version control.
TROUBLESHOOTING

If you see import path errors in index.html (Cannot find module '../.dfx/local/canisters/...'), double-check the canister name and your references.
If local certificate errors appear, you might need await agent.fetchRootKey() in your JavaScript code for local development only.
